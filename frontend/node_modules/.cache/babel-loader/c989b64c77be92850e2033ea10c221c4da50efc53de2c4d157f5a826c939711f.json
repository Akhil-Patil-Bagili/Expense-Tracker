{"ast":null,"code":"import React,{useEffect,useRef,useState}from\"react\";import{Chart,CategoryScale,LinearScale,BarController,BarElement,Title,Tooltip,Legend}from\"chart.js\";import\"../Styles/App.css\";import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";Chart.register(CategoryScale,LinearScale,BarController,BarElement,Title,Tooltip,Legend);const GraphView=()=>{const[expenses,setExpenses]=useState([]);const[incomes,setIncomes]=useState([]);const[error,setError]=useState(null);const chartRef=useRef(null);const myChartRef=useRef(null);const groupByMonth=arr=>arr.reduce((acc,item)=>{const date=new Date(item.date);const month=date.getMonth();acc[month]=(acc[month]||0)+parseFloat(item.amount);return acc;},{});useEffect(()=>{const fetchData=async()=>{const headers={Authorization:\"Bearer \".concat(localStorage.getItem(\"access\"))};try{const[expensesResponse,incomesResponse]=await Promise.all([fetch(\"http://127.0.0.1:8000/api/expenses/\",{headers}),fetch(\"http://127.0.0.1:8000/api/incomes/\",{headers})]);const expensesData=await expensesResponse.json();const incomesData=await incomesResponse.json();if(!expensesResponse.ok||!incomesResponse.ok){throw new Error(\"Failed to fetch data.\");}setExpenses(expensesData.results);setIncomes(incomesData.results);}catch(err){setError(\"An error occurred while fetching data.\");console.error(err.message);}};fetchData();},[]);useEffect(()=>{if(!expenses.length&&!incomes.length)return;const monthlyExpenses=groupByMonth(expenses);const monthlyIncomes=groupByMonth(incomes);const labels=[\"Jan\",\"Feb\",\"Mar\",\"Apr\",\"May\",\"Jun\",\"Jul\",\"Aug\",\"Sep\",\"Oct\",\"Nov\",\"Dec\"];const expensesData=labels.map((_,index)=>monthlyExpenses[index]||0);const incomesData=labels.map((_,index)=>monthlyIncomes[index]||0);const maxYValue=Math.max(...expensesData,...incomesData);const maxRoundedYValue=Math.ceil(maxYValue/5000)*5000;if(chartRef.current&&myChartRef.current){const{datasets}=myChartRef.current.data;datasets[0].data=expensesData;datasets[1].data=incomesData;myChartRef.current.update();}else{const ctx=chartRef.current.getContext(\"2d\");myChartRef.current=new Chart(ctx,{type:\"bar\",data:{labels:labels,datasets:[{label:\"Expenses\",data:expensesData,backgroundColor:\"rgba(255, 99, 132, 0.8)\",borderColor:\"rgba(255, 99, 132, 1)\",borderWidth:1},{label:\"Incomes\",data:incomesData,backgroundColor:\"rgba(75, 192, 192, 0.8)\",borderColor:\"rgba(75, 192, 192, 1)\",borderWidth:1}]},options:{scales:{x:{ticks:{font:{size:10}},barThickness:30},y:{ticks:{beginAtZero:true,font:{size:10},stepSize:Math.round(maxRoundedYValue/10),min:0,max:maxRoundedYValue}}},plugins:{legend:{labels:{font:{size:10}}},tooltip:{titleFont:{size:12},bodyFont:{size:10}}}}});}},[expenses,incomes]);return/*#__PURE__*/_jsxs(\"div\",{className:\"chart-view\",children:[error&&/*#__PURE__*/_jsx(\"p\",{className:\"error-message\",children:error}),/*#__PURE__*/_jsx(\"canvas\",{ref:chartRef})]});};export default GraphView;","map":{"version":3,"names":["React","useEffect","useRef","useState","Chart","CategoryScale","LinearScale","BarController","BarElement","Title","Tooltip","Legend","jsx","_jsx","jsxs","_jsxs","register","GraphView","expenses","setExpenses","incomes","setIncomes","error","setError","chartRef","myChartRef","groupByMonth","arr","reduce","acc","item","date","Date","month","getMonth","parseFloat","amount","fetchData","headers","Authorization","concat","localStorage","getItem","expensesResponse","incomesResponse","Promise","all","fetch","expensesData","json","incomesData","ok","Error","results","err","console","message","length","monthlyExpenses","monthlyIncomes","labels","map","_","index","maxYValue","Math","max","maxRoundedYValue","ceil","current","datasets","data","update","ctx","getContext","type","label","backgroundColor","borderColor","borderWidth","options","scales","x","ticks","font","size","barThickness","y","beginAtZero","stepSize","round","min","plugins","legend","tooltip","titleFont","bodyFont","className","children","ref"],"sources":["/Users/akhilpatilbagili/Documents/Bootcamp/Expense_Tracker/frontend/src/Components/GraphView.js"],"sourcesContent":["import React, { useEffect, useRef, useState } from \"react\";\nimport {\n    Chart,\n    CategoryScale,\n    LinearScale,\n    BarController,\n    BarElement,\n    Title,\n    Tooltip,\n    Legend\n} from \"chart.js\";\nimport \"../Styles/App.css\";\n\nChart.register(CategoryScale, LinearScale, BarController, BarElement, Title, Tooltip, Legend);\n\nconst GraphView = () => {\n    const [expenses, setExpenses] = useState([]);\n    const [incomes, setIncomes] = useState([]);\n    const [error, setError] = useState(null);\n\n    const chartRef = useRef(null);\n    const myChartRef = useRef(null);\n\n    const groupByMonth = (arr) => arr.reduce((acc, item) => {\n        const date = new Date(item.date);\n        const month = date.getMonth();\n        acc[month] = (acc[month] || 0) + parseFloat(item.amount);\n        return acc;\n    }, {});\n\n    useEffect(() => {\n        const fetchData = async () => {\n            const headers = {\n                Authorization: `Bearer ${localStorage.getItem(\"access\")}`,\n            };\n\n            try {\n                const [expensesResponse, incomesResponse] = await Promise.all([\n                    fetch(\"http://127.0.0.1:8000/api/expenses/\", { headers }),\n                    fetch(\"http://127.0.0.1:8000/api/incomes/\", { headers })\n                ]);\n\n                const expensesData = await expensesResponse.json();\n                const incomesData = await incomesResponse.json();\n\n                if (!expensesResponse.ok || !incomesResponse.ok) {\n                    throw new Error(\"Failed to fetch data.\");\n                }\n\n                setExpenses(expensesData.results);\n                setIncomes(incomesData.results);\n            } catch (err) {\n                setError(\"An error occurred while fetching data.\");\n                console.error(err.message);\n            }\n        };\n\n        fetchData();\n    }, []);\n\n    useEffect(() => {\n        if (!expenses.length && !incomes.length) return;\n\n        const monthlyExpenses = groupByMonth(expenses);\n        const monthlyIncomes = groupByMonth(incomes);\n\n        const labels = [\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\", \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\"];\n        const expensesData = labels.map((_, index) => monthlyExpenses[index] || 0);\n        const incomesData = labels.map((_, index) => monthlyIncomes[index] || 0);\n\n        const maxYValue = Math.max(...expensesData, ...incomesData);\n        const maxRoundedYValue = Math.ceil(maxYValue / 5000) * 5000;\n\n        if (chartRef.current && myChartRef.current) {\n            const { datasets } = myChartRef.current.data;\n            datasets[0].data = expensesData;\n            datasets[1].data = incomesData;\n\n            myChartRef.current.update();\n        } else {\n            const ctx = chartRef.current.getContext(\"2d\");\n            myChartRef.current = new Chart(ctx, {\n                type: \"bar\",\n                data: {\n                    labels: labels,\n                    datasets: [\n                        {\n                            label: \"Expenses\",\n                            data: expensesData,\n                            backgroundColor: \"rgba(255, 99, 132, 0.8)\",\n                            borderColor: \"rgba(255, 99, 132, 1)\",\n                            borderWidth: 1,\n                        },\n                        {\n                            label: \"Incomes\",\n                            data: incomesData,\n                            backgroundColor: \"rgba(75, 192, 192, 0.8)\",\n                            borderColor: \"rgba(75, 192, 192, 1)\",\n                            borderWidth: 1,\n                        }\n                    ],\n                },\n                options: {\n                    scales: {\n                        x: {\n                            ticks: {\n                                font: { size: 10 },\n                            },\n                            barThickness: 30,\n                        },\n                        y: {\n                            ticks: {\n                                beginAtZero: true,\n                                font: { size: 10 },\n                                stepSize: Math.round(maxRoundedYValue / 10),\n                                min: 0,\n                                max: maxRoundedYValue\n                            },\n                        },\n                    },\n                    plugins: {\n                        legend: {\n                            labels: {\n                                font: { size: 10 }\n                            },\n                        },\n                        tooltip: {\n                            titleFont: { size: 12 },\n                            bodyFont: { size: 10 }\n                        },\n                    },\n                },\n            });\n        }\n    }, [expenses, incomes]);\n\n    return (\n        <div className=\"chart-view\">\n            {error && <p className=\"error-message\">{error}</p>}\n            <canvas ref={chartRef}></canvas>\n        </div>\n    );\n};\n\nexport default GraphView;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}