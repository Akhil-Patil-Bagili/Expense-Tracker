{"ast":null,"code":"var _jsxFileName = \"/Users/akhilpatilbagili/Documents/Bootcamp/Expense_Tracker/frontend/src/Components/GraphView.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef, useState } from \"react\";\nimport { Chart, CategoryScale, LinearScale, BarController, BarElement, Title, Tooltip, Legend } from \"chart.js\";\nimport \"../Styles/App.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nChart.register(CategoryScale, LinearScale, BarController, BarElement, Title, Tooltip, Legend);\nconst GraphView = () => {\n  _s();\n  const [expenses, setExpenses] = useState([]);\n  const [incomes, setIncomes] = useState([]);\n  const [error, setError] = useState(null);\n  const chartRef = useRef(null);\n  const myChartRef = useRef(null);\n  const groupByMonth = arr => arr.reduce((acc, item) => {\n    const date = new Date(item.date);\n    const month = date.getMonth();\n    acc[month] = (acc[month] || 0) + parseFloat(item.amount);\n    return acc;\n  }, {});\n  useEffect(() => {\n    const fetchData = async () => {\n      const headers = {\n        Authorization: `Bearer ${localStorage.getItem(\"access\")}`\n      };\n      try {\n        const [expensesResponse, incomesResponse] = await Promise.all([fetch('${process.env.REACT_APP_API_URL}/api/expenses/', {\n          headers\n        }), fetch('${process.env.REACT_APP_API_URL}/api/incomes/', {\n          headers\n        })]);\n        const expensesData = await expensesResponse.json();\n        const incomesData = await incomesResponse.json();\n        if (!expensesResponse.ok || !incomesResponse.ok) {\n          throw new Error(\"Failed to fetch data.\");\n        }\n        setExpenses(expensesData.results);\n        setIncomes(incomesData.results);\n      } catch (err) {\n        setError(\"An error occurred while fetching data.\");\n        console.error(err.message);\n      }\n    };\n    fetchData();\n  }, []);\n  useEffect(() => {\n    if (!expenses.length && !incomes.length) return;\n    const monthlyExpenses = groupByMonth(expenses);\n    const monthlyIncomes = groupByMonth(incomes);\n    const labels = [\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\", \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\"];\n    const expensesData = labels.map((_, index) => monthlyExpenses[index] || 0);\n    const incomesData = labels.map((_, index) => monthlyIncomes[index] || 0);\n    const maxYValue = Math.max(...expensesData, ...incomesData);\n    const maxRoundedYValue = Math.ceil(maxYValue / 5000) * 5000;\n    if (chartRef.current && myChartRef.current) {\n      const {\n        datasets\n      } = myChartRef.current.data;\n      datasets[0].data = expensesData;\n      datasets[1].data = incomesData;\n      myChartRef.current.update();\n    } else {\n      const ctx = chartRef.current.getContext(\"2d\");\n      myChartRef.current = new Chart(ctx, {\n        type: \"bar\",\n        data: {\n          labels: labels,\n          datasets: [{\n            label: \"Expenses\",\n            data: expensesData,\n            backgroundColor: \"rgba(255, 99, 132, 0.8)\",\n            borderColor: \"rgba(255, 99, 132, 1)\",\n            borderWidth: 1\n          }, {\n            label: \"Incomes\",\n            data: incomesData,\n            backgroundColor: \"rgba(75, 192, 192, 0.8)\",\n            borderColor: \"rgba(75, 192, 192, 1)\",\n            borderWidth: 1\n          }]\n        },\n        options: {\n          scales: {\n            x: {\n              ticks: {\n                font: {\n                  size: 10\n                }\n              },\n              barThickness: 30\n            },\n            y: {\n              ticks: {\n                beginAtZero: true,\n                font: {\n                  size: 10\n                },\n                stepSize: Math.round(maxRoundedYValue / 10),\n                min: 0,\n                max: maxRoundedYValue\n              }\n            }\n          },\n          plugins: {\n            legend: {\n              labels: {\n                font: {\n                  size: 10\n                }\n              }\n            },\n            tooltip: {\n              titleFont: {\n                size: 12\n              },\n              bodyFont: {\n                size: 10\n              }\n            }\n          }\n        }\n      });\n    }\n  }, [expenses, incomes]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chart-view\",\n    children: [error && /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"error-message\",\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 139,\n      columnNumber: 23\n    }, this), /*#__PURE__*/_jsxDEV(\"canvas\", {\n      ref: chartRef\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 140,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 138,\n    columnNumber: 9\n  }, this);\n};\n_s(GraphView, \"L/UsMoNzY/4xfP3rdXYc59CUyeI=\");\n_c = GraphView;\nexport default GraphView;\nvar _c;\n$RefreshReg$(_c, \"GraphView\");","map":{"version":3,"names":["React","useEffect","useRef","useState","Chart","CategoryScale","LinearScale","BarController","BarElement","Title","Tooltip","Legend","jsxDEV","_jsxDEV","register","GraphView","_s","expenses","setExpenses","incomes","setIncomes","error","setError","chartRef","myChartRef","groupByMonth","arr","reduce","acc","item","date","Date","month","getMonth","parseFloat","amount","fetchData","headers","Authorization","localStorage","getItem","expensesResponse","incomesResponse","Promise","all","fetch","expensesData","json","incomesData","ok","Error","results","err","console","message","length","monthlyExpenses","monthlyIncomes","labels","map","_","index","maxYValue","Math","max","maxRoundedYValue","ceil","current","datasets","data","update","ctx","getContext","type","label","backgroundColor","borderColor","borderWidth","options","scales","x","ticks","font","size","barThickness","y","beginAtZero","stepSize","round","min","plugins","legend","tooltip","titleFont","bodyFont","className","children","fileName","_jsxFileName","lineNumber","columnNumber","ref","_c","$RefreshReg$"],"sources":["/Users/akhilpatilbagili/Documents/Bootcamp/Expense_Tracker/frontend/src/Components/GraphView.js"],"sourcesContent":["import React, { useEffect, useRef, useState } from \"react\";\nimport {\n    Chart,\n    CategoryScale,\n    LinearScale,\n    BarController,\n    BarElement,\n    Title,\n    Tooltip,\n    Legend\n} from \"chart.js\";\nimport \"../Styles/App.css\";\n\nChart.register(CategoryScale, LinearScale, BarController, BarElement, Title, Tooltip, Legend);\n\nconst GraphView = () => {\n    const [expenses, setExpenses] = useState([]);\n    const [incomes, setIncomes] = useState([]);\n    const [error, setError] = useState(null);\n\n    const chartRef = useRef(null);\n    const myChartRef = useRef(null);\n\n    const groupByMonth = (arr) => arr.reduce((acc, item) => {\n        const date = new Date(item.date);\n        const month = date.getMonth();\n        acc[month] = (acc[month] || 0) + parseFloat(item.amount);\n        return acc;\n    }, {});\n\n    useEffect(() => {\n        const fetchData = async () => {\n            const headers = {\n                Authorization: `Bearer ${localStorage.getItem(\"access\")}`,\n            };\n\n            try {\n                const [expensesResponse, incomesResponse] = await Promise.all([\n                    fetch('${process.env.REACT_APP_API_URL}/api/expenses/', { headers }),\n                    fetch('${process.env.REACT_APP_API_URL}/api/incomes/', { headers })\n                ]);\n\n                const expensesData = await expensesResponse.json();\n                const incomesData = await incomesResponse.json();\n\n                if (!expensesResponse.ok || !incomesResponse.ok) {\n                    throw new Error(\"Failed to fetch data.\");\n                }\n\n                setExpenses(expensesData.results);\n                setIncomes(incomesData.results);\n            } catch (err) {\n                setError(\"An error occurred while fetching data.\");\n                console.error(err.message);\n            }\n        };\n\n        fetchData();\n    }, []);\n\n    useEffect(() => {\n        if (!expenses.length && !incomes.length) return;\n\n        const monthlyExpenses = groupByMonth(expenses);\n        const monthlyIncomes = groupByMonth(incomes);\n\n        const labels = [\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\", \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\"];\n        const expensesData = labels.map((_, index) => monthlyExpenses[index] || 0);\n        const incomesData = labels.map((_, index) => monthlyIncomes[index] || 0);\n\n        const maxYValue = Math.max(...expensesData, ...incomesData);\n        const maxRoundedYValue = Math.ceil(maxYValue / 5000) * 5000;\n\n        if (chartRef.current && myChartRef.current) {\n            const { datasets } = myChartRef.current.data;\n            datasets[0].data = expensesData;\n            datasets[1].data = incomesData;\n\n            myChartRef.current.update();\n        } else {\n            const ctx = chartRef.current.getContext(\"2d\");\n            myChartRef.current = new Chart(ctx, {\n                type: \"bar\",\n                data: {\n                    labels: labels,\n                    datasets: [\n                        {\n                            label: \"Expenses\",\n                            data: expensesData,\n                            backgroundColor: \"rgba(255, 99, 132, 0.8)\",\n                            borderColor: \"rgba(255, 99, 132, 1)\",\n                            borderWidth: 1,\n                        },\n                        {\n                            label: \"Incomes\",\n                            data: incomesData,\n                            backgroundColor: \"rgba(75, 192, 192, 0.8)\",\n                            borderColor: \"rgba(75, 192, 192, 1)\",\n                            borderWidth: 1,\n                        }\n                    ],\n                },\n                options: {\n                    scales: {\n                        x: {\n                            ticks: {\n                                font: { size: 10 },\n                            },\n                            barThickness: 30,\n                        },\n                        y: {\n                            ticks: {\n                                beginAtZero: true,\n                                font: { size: 10 },\n                                stepSize: Math.round(maxRoundedYValue / 10),\n                                min: 0,\n                                max: maxRoundedYValue\n                            },\n                        },\n                    },\n                    plugins: {\n                        legend: {\n                            labels: {\n                                font: { size: 10 }\n                            },\n                        },\n                        tooltip: {\n                            titleFont: { size: 12 },\n                            bodyFont: { size: 10 }\n                        },\n                    },\n                },\n            });\n        }\n    }, [expenses, incomes]);\n\n    return (\n        <div className=\"chart-view\">\n            {error && <p className=\"error-message\">{error}</p>}\n            <canvas ref={chartRef}></canvas>\n        </div>\n    );\n};\n\nexport default GraphView;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}